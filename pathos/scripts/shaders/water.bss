$global_determinator specular 0 1
$global_determinator flowmap 0 1
$shader_vertex $begin
#version 130

uniform mat4 projection;
uniform mat4 modelview;
uniform mat4 normalmatrix_v;
uniform float texscale;

in vec4 in_position;
in vec2 in_texcoords;
in vec2 in_lightcoords;
in vec3 in_tangent;
in vec3 in_binormal;
in vec3 in_normal;

out vec4 ps_screencoords;
out vec3 ps_eyecoords;
out vec2 ps_texcoords;
out vec2 ps_lightcoords;
$branch flowmap == 1
$begin
    out vec2 ps_flowcoords;
$end

$branch specular == 1
$begin
    out vec3 ps_tangent;
    out vec3 ps_binormal;
    out vec3 ps_normal;
$end

void main()
{
    vec4 position = in_position * modelview;
    vec4 eye_position = position * projection;

    ps_screencoords = eye_position;
    ps_eyecoords = position.xyz;

    $branch flowmap == 1
    $begin
        ps_flowcoords = in_texcoords;
    $end

    $branch specular == 1
    $begin
        ps_tangent = (normalmatrix_v * vec4(in_tangent, 0.0)).xyz;
        ps_binormal = (normalmatrix_v * vec4(in_binormal, 0.0)).xyz;
        ps_normal = (normalmatrix_v * vec4(in_normal, 0.0)).xyz;
    $end

    ps_texcoords = in_texcoords * texscale;
    ps_lightcoords = in_lightcoords;
    gl_Position = eye_position;
}
$end
$shader_fragment 
$determinator fog 0 1
$determinator side 0 1
$determinator rectrefract 0 1
$begin
#version 130

uniform sampler2D normalMap;
uniform sampler2D lightMap;
uniform sampler2D refractMap;
uniform sampler2D reflectMap;
uniform sampler2DRect rectangleRefractMap;
uniform sampler2D diffuseMap;
uniform sampler2D lightvecsMap;
uniform sampler2D flowMap;

uniform mat4 normalmatrix;

uniform vec3 fogcolor;
uniform vec2 fogparams;

uniform float fresnel;
uniform float time;
uniform float strength;
uniform float lightstrength;
uniform float specularstrength;
uniform float phongexponent;
uniform float wavefresnelstrength;
uniform float flowSpeed;

uniform vec2 scroll;
uniform vec2 rectscale;

in vec4 ps_screencoords;
in vec3 ps_eyecoords;
in vec2 ps_texcoords;
in vec2 ps_lightcoords;
$branch flowmap == 1
$begin
    in vec2 ps_flowcoords;
$end

$branch specular == 1
$begin
    in vec3 ps_tangent;
    in vec3 ps_binormal;
    in vec3 ps_normal;
$end

out vec4 oColor;

float SplineFraction(float value, float scale)
{
    float valueSquared = value * value;
    return 3 * valueSquared - 2 * valueSquared * value;
}

$branch specular == 1
$begin
float CalcShininess(vec3 v_origin, vec3 v_normal, vec3 l_origin)
{
    vec3 halfVec = normalize(l_origin - v_origin);
    return max(dot(halfVec, v_normal), 0.0);
}

float CalcSpecular(vec3 v_origin, vec3 v_normal, vec3 lightDir, float specularStrength)
{
    vec3 eyeVec = normalize(-v_origin);
    vec3 reflectVec = reflect(lightDir, v_normal);
    float cosAlpha = clamp(dot(eyeVec, reflectVec), 0, 1);
    return pow(cosAlpha, phongexponent) * specularStrength;
}

vec4 GetLightmappedSpecular(vec3 v_origin, vec3 v_normal, float specularStrength)
{
    vec3 lightDir = (2.0 * texture2D(lightvecsMap, ps_lightcoords).xyz) - 1.0;
    lightDir = normalize(lightDir);
    vec4 lightDiffuse = texture2D(diffuseMap, ps_lightcoords);
    mat3 tbnMatrix = mat3(ps_tangent, ps_binormal, ps_normal);
    vec3 eyeSpaceDir = normalize(tbnMatrix * vec3(lightDir[0], -lightDir[1], lightDir[2]));
    float shineFactor = CalcShininess(normalize(v_origin), v_normal, eyeSpaceDir);
    float specularValue = CalcSpecular(v_origin, v_normal, -eyeSpaceDir, specularStrength);
    vec4 finalColor = specularValue * lightDiffuse * shineFactor;
    return finalColor;
}

vec4 GetUnderwaterRefracton(vec3 v_origin, vec3 v_normal, float specularStrength)
{
    vec3 lightDir = (2.0 * texture2D(lightvecsMap, ps_lightcoords).xyz) - 1.0;
    lightDir = normalize(lightDir);
    vec4 lightDiffuse = texture2D(diffuseMap, ps_lightcoords);
    mat3 tbnMatrix = mat3(ps_tangent, ps_binormal, ps_normal);
    vec3 eyeSpaceDir = normalize(tbnMatrix * vec3(lightDir[0], -lightDir[1], lightDir[2]));
    float shineFactor = CalcShininess(normalize(v_origin), v_normal, eyeSpaceDir);
    vec3 eyeVec = normalize(v_origin);
    float cosAlpha = clamp(dot(eyeSpaceDir, v_normal), 0, 1);
    float specularValue = pow(cosAlpha, phongexponent) * specularStrength;
    specularValue *= clamp(dot(eyeSpaceDir, eyeVec), 0, 1);
    vec4 finalColor = specularValue * lightDiffuse * shineFactor;
    return finalColor;
}
$end

void main()
{
    vec4 finalColor;

    vec2 texcoord = ps_texcoords + scroll;

    $branch flowmap == 1
    $begin
        vec2 flowDirection = texture2D(flowMap, ps_flowcoords).xy * 2.0 - 1.0;
        texcoord += flowDirection * time * flowSpeed;
    $end

    vec2 texc0 = vec2(texcoord.x + time * 0.20, texcoord.y + time * 0.15);
    vec2 texc1 = vec2(texcoord.x - time * 0.13, texcoord.y + time * 0.11);

    vec4 norm1 = texture(normalMap, texc0);
    vec4 norm2 = texture(normalMap, texc1);

    vec2 texc2 = vec2(texcoord.x + time * 0.17, texcoord.y + time * 0.15);
    vec2 texc3 = vec2(texcoord.x - time * 0.14, texcoord.y - time * 0.16);

    vec4 norm3 = texture(normalMap, texc2);
    vec4 norm4 = texture(normalMap, texc3);

    vec3 norm_combine = normalize((norm1 * 0.25 + norm2 * 0.25 + norm3 * 0.25 + norm4 * 0.25).xyz * 2.0 - 1.0);

    $branch side == 0
    $begin
        vec2 coordUV1 = (ps_screencoords.xy / (2 * ps_screencoords.w)) + 0.5 + norm_combine.xy * 0.1 * strength;
        $branch rectrefract == 1
        $begin
            coordUV1 *= rectscale;
            vec4 refractcolor = texture(rectangleRefractMap, coordUV1);
        $end
        $branch rectrefract == 0
        $begin
            vec4 refractcolor = texture(refractMap, coordUV1);
        $end

        vec4 lightmapcolor = texture(lightMap, ps_lightcoords);
        finalColor = refractcolor + lightmapcolor * lightstrength;

        $branch specular == 1
        $begin
            vec3 vnormal_texture = normalize((normalmatrix * vec4(norm_combine, 0)).xyz);
            finalColor += GetUnderwaterRefracton(ps_eyecoords, vnormal_texture, specularstrength);
        $end
    $end

    $branch side == 1
    $begin
        vec2 coordUV1 = (ps_screencoords.xy / (2 * ps_screencoords.w)) + 0.5 + norm_combine.xy * 0.1 * strength;
        $branch rectrefract == 1
        $begin
            coordUV1 *= rectscale;
            vec4 refractcolor = texture(rectangleRefractMap, coordUV1);
        $end
        $branch rectrefract == 0
        $begin
            vec4 refractcolor = texture(refractMap, coordUV1);
        $end

        vec2 coordUV2 = (vec2(ps_screencoords.x, -ps_screencoords.y) / (2 * ps_screencoords.w)) + 0.5 + norm_combine.xy * 0.1 * strength;
        vec4 reflectcolor = texture(reflectMap, coordUV2);

        vec3 fresnel_normal = norm_combine * wavefresnelstrength + (1.0 - wavefresnelstrength) * vec3(0, 0, 1);
        vec3 vnormal_texture = normalize((normalmatrix * vec4(fresnel_normal, 0)).xyz);
        vec3 vnormal = normalize((normalmatrix * vec4(0, 0, 1, 0)).xyz);
        float fresnelterm = clamp(dot(-normalize(ps_eyecoords), vnormal_texture) * 1.3 * fresnel, 0.0, 0.97);
        vec4 combinedColor = mix(reflectcolor, refractcolor, fresnelterm);

        vec4 lightmapcolor = texture(lightMap, ps_lightcoords);
        finalColor = combinedColor + lightmapcolor * lightstrength;

        $branch specular == 1
        $begin
            finalColor += GetLightmappedSpecular(ps_eyecoords, vnormal_texture, specularstrength);
        $end
    $end

    $branch fog == 1
    $begin
        float fogcoord = length(ps_eyecoords);
        float fogfactor = (fogparams.x - fogcoord) * fogparams.y;
        fogfactor = 1.0 - SplineFraction(clamp(fogfactor, 0.0, 1.0), 1.0);
        finalColor.xyz = mix(finalColor.xyz, fogcolor, fogfactor);
    $end

    oColor = finalColor;
}
$end